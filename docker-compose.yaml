name: infra

services:
  node-exporter:
    image: prom/node-exporter:v1.8.2
    pull_policy: if_not_present
    container_name: infra-exporter
    restart: unless-stopped
    env_file: .env
    command:
      - "--path.rootfs=/host"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9100"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  uptime-kuma:
    image: louislam/uptime-kuma:1.23.16
    pull_policy: if_not_present
    container_name: infra-uptime
    restart: unless-stopped
    env_file: .env
    volumes:
     - uptime:/app/data
    ports:
     - ${UPTIME_PORT}:3001
    healthcheck:
      test: ["CMD", "extra/healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  prometheus:
    image: prom/prometheus:v3.0.0
    pull_policy: if_not_present
    container_name: infra-prometheus
    restart: unless-stopped
    env_file: .env
    depends_on:
      node-exporter:
        condition: service_healthy
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  grafana:
    image: grafana/grafana-oss:11.3.1
    pull_policy: if_not_present
    container_name: infra-grafana
    restart: unless-stopped
    env_file: .env
    depends_on:
      prometheus:
        condition: service_healthy
    ports:
      - ${GRAFANA_PORT}:3000
    environment:
      GF_SERVER_ROOT_URL: ${GRAFANA_BASE_URL}
      GF_SMTP_ENABLED: ${GRAFANA_SMTP_ENABLED}
      GF_SMTP_HOST: ${GRAFANA_SMTP_HOST}
      GF_SMTP_STARTTLS_POLICY: ${GRAFANA_SMTP_TLS}
      GF_SMTP_USER: ${GRAFANA_SMTP_USER}
      GF_SMTP_PASSWORD: ${GRAFANA_SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: ${GRAFANA_SMTP_FROM_ADDRESS}
      GF_SMTP_FROM_NAME: ${GRAFANA_SMTP_FROM_NAME}
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning/
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana:/var/lib/grafana
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  bugsink:
    image: bugsink/bugsink:1.6.3
    pull_policy: if_not_present
    container_name: infra-bugsink
    restart: unless-stopped
    env_file: .env
    ports:
      - ${BUGSINK_PORT}:8000
    environment:
      SITE_TITLE: "NEI/AAC - Sentry"
      BEHIND_HTTPS_PROXY: True
      SINGLE_TEAM: True
      PORT: 8000
      BASE_URL: ${BUGSINK_BASE_URL}
      USER_REGISTRATION: CB_ADMINS
      SECRET_KEY: ${BUGSINK_SECRET_KEY}
      CREATE_SUPERUSER: ${BUGSINK_SUPERUSER}
      EMAIL_HOST: ${BUGSINK_SMTP_HOST}
      EMAIL_HOST_USER: ${BUGSINK_SMTP_USER}
      EMAIL_HOST_PASSWORD: ${BUGSINK_SMTP_PASSWORD}
      EMAIL_PORT: ${BUGSINK_SMTP_PORT}
      EMAIL_USE_TLS: ${BUGSINK_SMTP_TLS}
      DEFAULT_FROM_EMAIL: ${BUGSINK_SMTP_FROM}
    volumes:
      - bugsink:/data
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:8000/\").raise_for_status()'"]
      interval: 30s
      timeout: 20s
      retries: 10

  portainer:
    image: portainer/portainer-ce:2.30.0-alpine
    pull_policy: if_not_present
    container_name: infra-portainer
    restart: unless-stopped
    ports:
      - ${PORTAINER_PORT}:9000
    volumes:
      - portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9000"]
      interval: 30s
      timeout: 20s
      retries: 10

volumes:
  uptime:
  prometheus:
  grafana:
  portainer:
  bugsink:
